{
	// Place your snippets for dart here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// },
	
	"创建AnimatedBuilder": {
		"prefix": "bab",
		"body": [
			"new AnimatedBuilder(",
			"  animation: $1,",
			"  child: $1,",
			"  builder: (BuildContext context, Widget child) {",
			"    return Container();",
			"  },",
			"),",
		],
		"description": "创建AnimatedBuilder"
	},
	"创建Build()方法": {
		"prefix": "bu",
		"body": [
			"@override",
			"Widget build(BuildContext context) {",
			"  return $1;",
			"}",
		],
		"description": "创建Build()方法"
	},
	"创建FutureBuilder": {
		"prefix": "bufb",
		"body": [
			"new FutureBuilder(",
			"  future: $1,",
			"  initialData: $1,",
			"  builder: (BuildContext context, AsyncSnapshot snapshot) {",
			"    return $1;",
			"  },",
			");",
		],
		"description": "创建FutureBuilder"
	},
	"创建LayoutBuilder": {
		"prefix": "bulb",
		"body": [
			"new LayoutBuilder(",
			"  builder: (BuildContext context, BoxConstraints constraints) {",
			"    return $1;",
			"  },",
			");",
		],
		"description": "创建LayoutBuilder"
	},
	"创建OrientationBuilder": {
		"prefix": "buob",
		"body": [
			"new OrientationBuilder(",
			"  builder: (BuildContext context, Orientation orientation) {",
			"    return Container();",
			"  },",
			");",
		],
		"description": "创建OrientationBuilder"
	},
	"创建StatefulBuilder": {
		"prefix": "bustf",
		"body": [
			"new StatefulBuilder(",
			"  builder: (BuildContext context, setState) {",
			"    return $1;",
			"  },",
			");",
		],
		"description": "创建StatefulBuilder"
	},
	"创建StreamBuilder": {
		"prefix": "bustr",
		"body": [
			"new StreamBuilder(",
			"  stream: $1,",
			"  initialData: $2,",
			"  builder: (BuildContext context, AsyncSnapshot snapshot) {",
			"    return $3;",
			"  },",
			");",
		],
		"description": "创建StreamBuilder"
	},
	"创建GridView.count": {
		"prefix": "gv",
		"body": [
			"new GridView.count(",
			"  // 创建几列",
			"  crossAxisCount: $1,",
			"  // Axis.horizontal表示横向滑动，scrollDirection: Axis.vertical表示纵向滑动",
			"  scrollDirection: Axis.vertical,",
			"  // 列之间的间距",
			"  crossAxisSpacing: $2,",
			"  // 行之间的间距",
			"  mainAxisSpacing: $3,",
			"  // 默认false 是否根据子孩子的宽高自动包裹item自身",
			"  shrinkWrap: false,",
			"  // true表示数据倒序排列 false表示顺序排列",
			"  reverse: false,",
			"  // 子孩子的比例",
			"  childAspectRatio: $4,",
			"  // 设置子孩子item,这里传入子孩子控件",
			"  children: $5,",
			");",
		],
		"description": "创建GridView.count"
	},
	"创建 Inherited": {
		"prefix": "inh",
		"body": [
			"class $1 extends InheritedWidget {",
			"  $1({Key key, this.child}) : super(key: key, child: child);",
			"",
			" final Widget child;",
			"",
			"  static $1 of(BuildContext context) {",
			"    return (context.inheritFromWidgetOfExactType($1)as $1);",
			"  }",
			"",
			"  @override",
			"  bool updateShouldNotify( $1 oldWidget) {",
			"    return true;",
			"  }",
			"}",
		],
		"description": "创建 Inherited"
	},
}